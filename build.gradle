buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath "net.dumbcode.gradlehook:GradleHook:1.3.1"
    }
}
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
/*
 * All Rights Reserved
 *
 * Copyright (c) 2021, AlaharranHonor, Legenden.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "net.dumbcode.gradlehook"


group = 'com.alaharranhonor.swem' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'swem'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    // 2020/05/14
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'


            property 'swem.debug', 'true'

            args "--username", "XDelphii", "--uuid", "982efc46-99ea-4be9-9f03-5520dc9a8217"

            jvmArgs "-Xms2G", "-Xmx8G"

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        clientAlt {
            parent minecraft.runs.client
            workingDirectory project.file('runs/' + name)
            taskName 'ClientAlt'
            args '--username', 'Alt'
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'swem', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            environment 'target', 'fmluserdevdata'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "KosmX's maven"
        url = "https://maven.kosmx.dev/"
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${mc_version}:${geckolib_version}")
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    compileOnly fg.deobf("curse.maven:placableitems-227951:3565979")
    implementation fg.deobf("curse.maven:xaeros-minimap-263420:3967739")


    compileOnly 'org.jetbrains:annotations:20.1.0'

    //Apply mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

}

mixin {
    add sourceSets.main, "swem.refmap.json"
    config 'swem.mixins.json'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "swem",
                "Specification-Vendor"    : "swemalaharranhonor",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "swemalaharranhonor",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "swem.mixins.json"
        ])
    }
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]

    finalizedBy 'reobfShadowJar'
    //relocate 'com.tterrag.registrate', 'com.mymod.repack.registrate'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

// Thanks to McJty
String getCurseforgeChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

String getDiscordChangelog() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it

            if (it.startsWith('-')) {
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "[\$0](https://github.com/\$1/issues/\$2)");
                temp = temp.replaceAll("#([0-9]+)\\b(?!])", "[\$0](https://github.com/$github_project/issues/\$1)");
            }
            str += "$temp\n"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

import com.matthewprenger.cursegradle.CurseArtifact
def stabilitySuffix = ""

tasks.curseforge.enabled = project.hasProperty('curseforge_key')


curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {

        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getCurseforgeChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion project.mc_version
        mainArtifact(jar) {
            displayName = "${modname} - ${version}"
        }
        relations {
            requiredDependency "geckolib"
            requiredDependency "playeranimator"
        }
    }
}


tasks.getByName("curseforge").doLast {
    if (project.hasProperty('swe_announcements_hook')) {
        println "Preparing webhook"
        def fileId = (tasks.getByName("curseforge$project.projectId").property("mainArtifact") as CurseArtifact).fileID
        def curseforge_download = "https://www.curseforge.com/minecraft/mc-mods/$project.curseforge_slug/files/$fileId"
        def release_url = curseforge_download
        def discordChangelog = getDiscordChangelog()

        def result = DiscordBuilder.createForm {
            embed {
                color = Integer.decode(project.project_color)
                author {
                    name = project.project_name + stabilitySuffix
                    url = project.project_url
                }
                thumbnail { url = project.project_logo }
                title = "$project.project_name $project.version Released"
                url = release_url
                field {
                    name = "Changes:"
                    value = discordChangelog
                }
                field {
                    name = "Downloads:"
                    value = "[$curseforge_emote CurseForge]($curseforge_download)"
                }
                footer {
                    text = "A $project.loader_name Mod"
                    icon_url = project.loader_icon
                }
            }
        }.send(project.property('swe_announcements_hook'))

        println "Discord Webhook Response: " + result.responseCode
    }
}
